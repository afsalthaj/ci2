#!/bin/bash
# Script to build a simple version github-pages markdown file for a list of
# input docker images.

# Library import helper
function import() {
    IMPORT_PATH="${BASH_SOURCE%/*}"
    if [[ ! -d "$IMPORT_PATH" ]]; then IMPORT_PATH="$PWD"; fi
    . $IMPORT_PATH/$1
    [ $? != 0 ] && echo "$1 import error" 1>&2 && exit 1
}

import lib-ci

if [ -z "$(git config --global user.email)" ]; then
    git config --global user.email ci@ci
fi

if [ -z "$(git config --global user.name)" ]; then
    git config --global user.name sbt-ci-build-doc
fi


do_pages() {
  DOC_BRANCH=gh-pages
  
  if [ ! -z "$DISABLE_DOCS" ]; then
    echo "Github pages document push disabled by DISABLE_DOCS" 1>&2
    return
  fi
  
  GIT_REMOTE=$(git remote -v | cut -f2 | cut -d' ' -f1 | head -n1)
  if [ -z $GIT_REMOTE ]; then
    echoerr "No git remote could be identified. Documentation build will not work."
    return
  fi

  # Don't mess up .git dir branch state in real work dir - store where we were
  # Only relevant for local testers.
  ORIG_BRANCH=$(git symbolic-ref HEAD)
  echoerr "Original branch: $ORIG_BRANCH"
  
  # Make a site directory
  mkdir _site

  export GIT_DIR=$(pwd)/.git
  export GIT_WORK_TREE=$(pwd)/_site

  git symbolic-ref HEAD refs/heads/$DOC_BRANCH || exit 1

  # Does gh-pages exist on the remote?
  if ! git show-ref refs/remotes/$GIT_REMOTE/$DOC_BRANCH; then
      # Create an empty branch.
      echoerr "Warning: $DOC_BRANCH will be created (it did not exist on the remote)"
  else
      # Track the existent branch
      echo "Checking out current $DOC_BRANCH"
      git branch $DOC_BRANCH -f $GIT_REMOTE/$DOC_BRANCH || exit 1
      
      # Read the tree into the index so the build result is auto-available
      git read-tree refs/heads/$DOC_BRANCH || exit 1
  fi

  # Update the documentation
  cat << EOF > $GIT_WORK_TREE/index.md
---
layout: page
title: Docker Image Repository Versioning
tagline: Versioning Information Page
description: Current version of last built images from this repository.
---
# Published Images
This is the current listing of images published by this repository.
This data is also available under \`version.json\` for programmatic consumption.

EOF
  for image_path in "$@"; do
    echo "* \`$image_path\`" >> $GIT_WORK_TREE/index.md
  done
  
  echo -n "[" > $GIT_WORK_TREE/version.json
  
  num_elems=$#
  for (( idx=0; idx <=$(($num_elems - 1)); idx++ )); do
    if [ $idx -eq 0 ]; then
        echo -n "\"$image_path\"" >> $GIT_WORK_TREE/version.json
    else
        echo -n ", \"$image_path\"" >> $GIT_WORK_TREE/version.json
    fi
  done
  echo -n "]" >> $GIT_WORK_TREE/version.json

  git add -A || exit 1
  git commit -m "CI automatic documentation ($CI_BUILD_URL)" || exit 1
  
  unset GIT_DIR
  unset GIT_WORK_TREE
  
  git symbolic-ref HEAD $ORIG_BRANCH || exit 1
}

do_pages "$@"
