#!/bin/bash
# Make might be semantically pretty, but the language sucks. This is much
# clearer.

# Build arguments to pass to docker build
BUILD_ARGS=()

function parse_build_args() {
    # Parse build args
    for a in $1; do
        if [[ $a == --* ]]; then
            BUILD_ARGS+=("$a")
            shift
        else
            # Done with build args
            break
        fi
    done
}

# Get the action
ACTION=$1
shift

case $ACTION in
    build)
    parse_build_args
    ;;
    push)
    ;;
    *)
    echo "Must specify either build or push" 1>&2 && exit 1
    ;;
esac

# Find all the docker images, use the directory structure for their path.
IMAGES=()
while read i ; do
    IMAGES+=( $(dirname $i) )
done < <(find * -name Dockerfile -type f -print | sort)

if [ ! -z $TAG ]; then
    TAG=$TAG
else
    TAG=$(cat VERSION)
fi

# Find the images we were requested to build, or build all if none specified.
TOBUILD=()
if [ $# -gt 0 ]; then
    for j in $@; do
        for i in ${IMAGES[@]}; do
            if [ "$i" = "$j" ]; then
                TOBUILD+=( "$i" )
                break
            fi
        done
    done
else
    TOBUILD=${IMAGES[@]}
fi

echo "Using docker images:"
for i in ${TOBUILD[@]}; do
    echo " - ${PREFIX}${i}:${TAG}"
done

do_make() {
    # Discover proxies
    if [ -z $https_proxy ]; then
        https_proxy=$http_proxy
    fi

    if [ -z $ftp_proxy ]; then
        ftp_proxy=$http_proxy
    fi

    for i in ${TOBUILD[@]}; do
        docker build ${BUILD_ARGS[@]} \
                     --build-arg=http_proxy=$http_proxy \
                     --build-arg=https_proxy=$http_proxy \
                     --build-arg=ftp_proxy=$http_proxy \
         -t ${PREFIX}${i}:${TAG} ${i}
         exit_code=$?
         if [ $exit_code != 0 ]; then
            echo "Docker image failed to build, exit status: $exit_code" 1>&2
            exit 1
         fi
    done
}

do_push() {
    for i in ${TOBUILD[@]}; do
        docker push ${PREFIX}${i}:${TAG}
    done    
}

# Options!
case $ACTION in
    push)
        do_push
        ;;
    build)
        do_make
        ;;
esac

    
exit 0
